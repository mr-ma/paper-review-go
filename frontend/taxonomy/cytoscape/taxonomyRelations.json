    /*
		var cy = cytoscape({
		  container: document.getElementById('cy'),
		  elements:  [
  // nodes
  // Attack View
  {data: { id: 'Attack View' }, classes: 'parentNode' },
  { data: { id: 'Tools', parent: 'Attack View', width: 50 }, classes: 'childNode' },
  { data: { id: 'Disassembler', parent: 'Attack View', width: 120 }, classes: 'childNode' },
  { data: { id: 'Debugger', parent: 'Attack View', width: 80 }, classes: 'childNode' },
  { data: { id: 'Tracer', parent: 'Attack View', width: 60 }, classes: 'childNode' },
  { data: { id: 'Emulator', parent: 'Attack View', width: 80 }, classes: 'childNode' },
  { data: { id: 'Reverse Engineering', parent: 'Attack View', width: 110 }, classes: 'childNode' },
  { data: { id: 'Attacker', parent: 'Attack View', width: 80 }, classes: 'childNode' },
  { data: { id: 'Discovery', parent: 'Attack View', width: 90 }, classes: 'childNode' },
  { data: { id: 'Attack', parent: 'Attack View', width: 60 }, classes: 'childNode' },
  { data: { id: 'No root', parent: 'Attack View', width: 70 }, classes: 'childNode' },
  { data: { id: 'Pattern matching', parent: 'Attack View', width: 160 }, classes: 'childNode' },
  { data: { id: 'Taint analysis', parent: 'Attack View', width: 140 }, classes: 'childNode' },
  { data: { id: 'Graph-based analysis', parent: 'Attack View', width: 200 }, classes: 'childNode' },
  { data: { id: 'Symbolic execution', parent: 'Attack View', width: 180 }, classes: 'childNode' },
  { data: { id: 'Binary patching', parent: 'Attack View', width: 150 }, classes: 'childNode' },
  { data: { id: 'Process memory patching', parent: 'Attack View', width: 230 }, classes: 'childNode' },
  { data: { id: 'Runtime data manipulation', parent: 'Attack View', width: 250 }, classes: 'childNode' },
  { data: { id: 'Call interposition', parent: 'Attack View', width: 180 }, classes: 'childNode' },
  { data: { id: 'Control flow hijacking', parent: 'Attack View', width: 220 }, classes: 'childNode' },
  // edges
  {
    data: {
      id: 'Disassembler_Tools',
      source: 'Disassembler',
      target: 'Tools'
    },
    classes: 'aggregation'
  },
  {
    data: {
      id: 'Debugger_Tools',
      source: 'Debugger',
      target: 'Tools'
    },
    classes: 'aggregation'
  },
  {
    data: {
      id: 'Tracer_Tools',
      source: 'Tracer',
      target: 'Tools'
    },
    classes: 'aggregation'
  },
  {
    data: {
      id: 'Emulator_Tools',
      source: 'Emulator',
      target: 'Tools'
    },
    classes: 'aggregation'
  },
  {
    data: {
      id: 'Tools_ReverseEngineering',
      source: 'Tools',
      target: 'Reverse Engineering'
    },
    classes: 'composition'
  },
  {
    data: {
      id: 'Attacker_ReverseEngineering',
      source: 'Attacker',
      target: 'Reverse Engineering'
    },
    classes: 'composition'
  },
  {
    data: {
      id: 'Discovery_ReverseEngineering',
      source: 'Discovery',
      target: 'Reverse Engineering'
    },
    classes: 'composition'
  },
  {
    data: {
      id: 'Attack_ReverseEngineering',
      source: 'Attack',
      target: 'Reverse Engineering'
    },
    classes: 'composition'
  },
  {
    data: {
      id: 'NoRoot_Attacker',
      source: 'No root',
      target: 'Attacker'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'PatternMatching_Discovery',
      source: 'Pattern matching',
      target: 'Discovery'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'TaintAnalysis_Discovery',
      source: 'Taint analysis',
      target: 'Discovery'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'Graph-basedAnalysis_Discovery',
      source: 'Graph-based analysis',
      target: 'Discovery'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'SymbolicExecution_Discovery',
      source: 'Symbolic execution',
      target: 'Discovery'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'Binary patching_Attack',
      source: 'Binary patching',
      target: 'Attack'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'ProcessMemoryPatching_Attack',
      source: 'Process memory patching',
      target: 'Attack'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'RuntimeDataManipulation_Attack',
      source: 'Runtime data manipulation',
      target: 'Attack'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'CallInterposition_Attack',
      source: 'Call interposition',
      target: 'Attack'
    },
    classes: 'inheritance'
  },
  {
    data: {
      id: 'ControlFlowHijacking_Attack',
      source: 'Control flow hijacking',
      target: 'Attack'
    },
    classes: 'inheritance'
  }
],
  // Defense View
  {data: { id: 'Defense View' }, classes: 'parentNode' },
  { data: { id: 'Measure', parent: 'Defense View', width: 70 }, classes: 'childNode' },
  { data: { id: 'Overhead', parent: 'Defense View', width: 80 }, classes: 'childNode' },
  { data: { id: 'Trust anchor', parent: 'Defense View', width: 120 }, classes: 'childNode' },
  { data: { id: 'Protection level', parent: 'Defense View', width: 160 }, classes: 'childNode' },
  { data: { id: 'Fair', parent: 'Defense View', width: 40 }, classes: 'childNode' },
  { data: { id: 'Medium', parent: 'Defense View', width: 60 }, classes: 'childNode' },
  { data: { id: 'High', parent: 'Defense View', width: 40 }, classes: 'childNode' },
  { data: { id: 'N/A', parent: 'Defense View', width: 30 }, classes: 'childNode' },
  { data: { id: 'Software', parent: 'Defense View', width: 80 }, classes: 'childNode' },
  { data: { id: 'Dongle', parent: 'Defense View', width: 60 }, classes: 'childNode' },
  { data: { id: 'TPM', parent: 'Defense View', width: 30 }, classes: 'childNode' },
  { data: { id: 'SGX', parent: 'Defense View', width: 30 }, classes: 'childNode' },
  { data: { id: 'Other', parent: 'Defense View', width: 50 }, classes: 'childNode' },
  { data: { id: 'Symbolic execution', parent: 'Defense View', width: 180 }, classes: 'childNode' },
  { data: { id: 'Binary patching', parent: 'Defense View', width: 150 }, classes: 'childNode' },
  { data: { id: 'Process memory patching', parent: 'Defense View', width: 230 }, classes: 'childNode' },
  { data: { id: 'Runtime data manipulation', parent: 'Defense View', width: 250 }, classes: 'childNode' },
  { data: { id: 'Call interposition', parent: 'Defense View', width: 180 }, classes: 'childNode' },
  { data: { id: 'Control flow hijacking', parent: 'Defense View', width: 220 }, classes: 'childNode' },
		    style: [
		        {
		            selector: '.childNode',
		            style: {
		            	width: 'data(width)',
		            	height: '50px',
		            	color: 'black',
		              shape: 'roundrectangle',
		              'background-color': 'lightblue',
            			label: 'data(id)',
            			'text-valign': 'center',
            			'text-halign': 'center'
		            }
		        },
            {
                selector: '.parentNode',
                style: {
                    'background-color': 'lightgrey',
                    label: 'data(id)',
                    'text-valign': 'top',
                    'text-halign': 'right',
                    'text-margin-x': '-100px',
                    'text-margin-y': '30px'
                }
            },
		        {
		        	selector: 'edge',
		        	style: {
               'curve-style': 'bezier',
               'width': 5,
               'target-arrow-color': 'white', // #ccc
               'line-color': 'white'
		        	}
		        },
            {
              selector: '.composition',
              style: {
                'target-arrow-shape': 'diamond',
                'target-arrow-fill': 'filled',
                'arrow-scale': 2,
              }
            },
            {
              selector: '.aggregation',
              style: {
                'target-arrow-shape': 'diamond',
                'target-arrow-fill': 'hollow',
                'arrow-scale': 2,
              }
            },
            {
              selector: '.inheritance',
              style: {
                'target-arrow-shape': 'triangle',
                'target-arrow-fill': 'hollow',
                'arrow-scale': 1.5
              }
            }],
    layout: {
    name: 'breadthfirst'
  }
		});
    */